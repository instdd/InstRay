name: Build APK

on:
  # ▸ ручной запуск с возможностью указать тег, к которому прикреплять билды
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'GitHub-тег для релиза (если нужен ручной upload)'
        required: false
        type: string
  # ▸ автосборка при пуше в master и при пуше тега вида v1.2.3
  push:
    branches: [ master ]
    tags:     [ 'v*' ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ────────────────────────── исходники ──────────────────────────
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          submodules: recursive
          fetch-depth: 0

      # ─────────────────────── Android SDK / NDK ─────────────────────
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3.2.0
        with:
          log-accepted-android-sdk-licenses: false
          cmdline-tools-version: '12266719'
          packages: 'platforms;android-35 build-tools;35.0.0 platform-tools'

      - name: Install NDK 29
        run: |
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            --channel=3 \
            --install "ndk;29.0.13113456"
          echo "NDK_HOME=$ANDROID_HOME/ndk/29.0.13113456" >> "$GITHUB_ENV"

      # ───────────── кэш и сборка libtun2socks (C) ─────────────
      - name: Restore cached libtun2socks
        id: cache-libtun2socks-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/libs
          key: libtun2socks-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/badvpn/HEAD') }}-${{ hashFiles('.git/modules/libancillary/HEAD') }}

      - name: Build libtun2socks
        if: steps.cache-libtun2socks-restore.outputs.cache-hit != 'true'
        run: bash compile-tun2socks.sh

      - name: Save libtun2socks
        if: steps.cache-libtun2socks-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/libs
          key: libtun2socks-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/badvpn/HEAD') }}-${{ hashFiles('.git/modules/libancillary/HEAD') }}

      - name: Copy libtun2socks into app module
        run: cp -r ${{ github.workspace }}/libs ${{ github.workspace }}/app

      # ─────── загрузка libv2ray.aar из AndroidLibXrayLite ───────
      - name: Fetch AndroidLibXrayLite latest tag
        id: xray_tag
        run: |
          pushd AndroidLibXrayLite
          echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          popd

      - name: Download libv2ray.aar
        uses: robinraju/release-downloader@v1.12
        with:
          repository: 2dust/AndroidLibXrayLite
          tag: ${{ steps.xray_tag.outputs.tag }}
          fileName: libv2ray.aar
          out-file-path: app/libs/

      # ───────────── кэш и сборка libhysteria2 (Go) ─────────────
      - name: Restore cached libhysteria2
        id: cache-libhysteria2-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/hysteria/libs
          key: libhysteria2-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/hysteria/HEAD') }}-${{ hashFiles('libhysteria2.sh') }}

      - name: Setup Go
        if: steps.cache-libhysteria2-restore.outputs.cache-hit != 'true'
        uses: actions/setup-go@v5.4.0
        with:
          go-version-file: AndroidLibXrayLite/go.mod
          cache: false

      - name: Build libhysteria2
        if: steps.cache-libhysteria2-restore.outputs.cache-hit != 'true'
        run: bash libhysteria2.sh

      - name: Save libhysteria2
        if: steps.cache-libhysteria2-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/hysteria/libs
          key: libhysteria2-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/hysteria/HEAD') }}-${{ hashFiles('libhysteria2.sh') }}

      - name: Copy libhysteria2 into app module
        run: cp -r ${{ github.workspace }}/hysteria/libs ${{ github.workspace }}/app

      # ───────────────────────────── Java 21 ─────────────────────────────
      - name: Set up Java 21
        uses: actions/setup-java@v4.7.0
        with:
          distribution: temurin
          java-version: '21'

      # ─────────────────────── распаковка Keystore ───────────────────────
      - name: Decode keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2.4
        with:
          fileName: android_keystore.jks
          encodedString: ${{ secrets.APP_KEYSTORE_BASE64 }}

      # ─────────────────── сборка APK + AAB (release) ────────────────────
      - name: Build release artifacts
        run: |
          # создаём local.properties там, где находится build.gradle.kts
          echo "sdk.dir=${ANDROID_HOME}" > InstRay/local.properties

          # даём права root-скрипту и работаем через него
          chmod +x ./gradlew
          ./gradlew -p InstRay licenseFdroidReleaseReport
          ./gradlew -p InstRay \
                    :app:assembleRelease \
                    :app:bundleRelease \
                    -Pandroid.injected.signing.store.file=${{ steps.android_keystore.outputs.filePath }} \
                    -Pandroid.injected.signing.store.password=${{ secrets.APP_KEYSTORE_PASSWORD }} \
                    -Pandroid.injected.signing.key.alias=${{ secrets.APP_KEYSTORE_ALIAS }} \
                    -Pandroid.injected.signing.key.password=${{ secrets.APP_KEY_PASSWORD }}
      

      # ────────────────────────── артефакты CI ───────────────────────────
      - name: Upload arm64-v8a APK
        uses: actions/upload-artifact@v4.6.2
        with:
          name: arm64-v8a
          path: app/build/outputs/apk/*/release/*arm64-v8a*.apk

      - name: Upload armeabi-v7a APK
        uses: actions/upload-artifact@v4.6.2
        with:
          name: armeabi-v7a
          path: app/build/outputs/apk/*/release/*armeabi-v7a*.apk

      - name: Upload x86 APK
        uses: actions/upload-artifact@v4.6.2
        with:
          name: x86
          path: app/build/outputs/apk/*/release/*x86*.apk

      - name: Upload AAB
        uses: actions/upload-artifact@v4.6.2
        with:
          name: aab
          path: app/build/outputs/bundle/release/*.aab

      # ─────────────── публикация в релиз GitHub (опц.) ───────────────
      - name: Upload assets to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: >
          (startsWith(github.ref, 'refs/tags/')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.release_tag != '')
        with:
          tag: ${{ github.event.inputs.release_tag || github.ref_name }}
          file: |
            app/build/outputs/apk/*playstore*/release/*.apk
            app/build/outputs/bundle/release/*.aab
          file_glob: true
          prerelease: true
